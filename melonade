#!/usr/bin/env wish

# This is Melonade, a set of simple development/debugging accessories for Tcl/Tk.
# The idea is that you would start a Wish/Tcl+Tk shell for use as an interactive scratchpad for development, and [source] melonade to provide some GUI tools for inspecting/introspecting parts of the Tcl environment, with the ability to set traces, manage procs, etc. as well.
# It would also be nice to be able to start it and then "attach" to an existing interpreter.  Maybe use [send] to tell the other interpreter to source "melonade" (you'd need to know its appname though - is there any way to browse those?).
# Another mode of operation might be to provide the functionality as a package, to avoid having to mess with source paths when starting it up. (TODO)

# This is actually also a package; see end for package declaration (it's there in case of errors in the other code).

package require Tk

namespace eval ::melonade {
	set version 0.0
	set home [file dirname [info script]]	;# + file normalize?
	# TODO: namespace export ...
}

# TODO: maybe move this into a separate settings.tcl file (and add support for ~/.melonade/settings.tcl slurping).
namespace eval ::melonade::settings {
}

# lappend auto_path [file dirname [info script]]
# Oh, pity - $auto_path doesn't apply to [source].
#puts stderr "\$auto_path = $auto_path"

foreach component {
	every.tcl
	variable-inspector.tcl
	proc-inspector.tcl
	widget-inspector.tcl
	channel-inspector.tcl
	console.tcl
	packages.tcl
	after-inspector.tcl
} {
	puts stderr "Activating $component"
	source [file join $::melonade::home $component]
}
# TODO: command browser (not only procs)
# TODO: functions as well?  i.e. mathops
# TODO: (X11?) event viewer?
# TODO: a console!  For when you have a running program with no interactive shell active but you need one!   Maybe import/adapt the one built into Piaf.

# Add Melonade functionality to a running app (provided you know its Tk appname):
# TODO: a melonade namespace for these!  Also, what if you wanted to use Melonade on a running Melonade instance?!
proc ::melonade::attach {appname} {
	send $appname [list source [file join $::melonade_home melonade]]
}

# Might be nice to provide the ability to tidy up as well:
proc ::melonade::detach {appname} {
	# TODO: perhaps a separate script?  Or define a cleanup proc in each component file?
}

# If running as a standalone program, exit from Tcl/Tk altogether.
# If imported as a package or sourced directly, just close the windows and clean up the namespace.
proc ::melonade::exit {} {
	# TODO
}

# I've noticed that many packages are named with an initial capital.  Why?  Should I do likewise?
package provide melonade $::melonade::version

